#!/bin/sh

set -e

: ${GIT:=git}
: ${HG:=hg}
: ${GIT_DIR:=.git}
: ${HG_DIR:=${GIT_DIR}/hg}
: ${HG_GIT_MAPFILE:=${HG_DIR}/.hg/git-mapfile}
: ${HG_GIT_DIR:=${HG_DIR}/.hg/git}
: ${HG_REMOTE:=hg}

check_hg() {
    command -v $HG >/dev/null || { echo "error: hg not found" >&2; exit 1; }
    python -c 'import hggit' 2>/dev/null || {
        echo "error: hg-git not installed"
        exit 1
    }
    [ -f $HOME/.hgrc ] && grep -q 'hggit' $HOME/.hgrc || {
        echo "error: hg-git not enabled in $HOME/.hgrc, use git hg configure"
        exit 1
    }
}

hg_() {
    $HG -R "$HG_DIR" "$@"
}

# Map default in Hg to master in Git
map_branch() {
    [ "$1" = "default" ] && echo "master" || echo "$1"
}

# Create Hg bookmarks for Hg branches
update_bookmarks() {
    hg_ branches | while read branch rev rest; do
        target=$(map_branch $branch)
        rev=$(echo $rev | sed -r "s/([0-9]+):.*/\\1/")
        hg_ bookmark -f -r $rev $target
    done
}

# Delete all Hg bookmarks
delete_bookmarks() {
    hg_ bookmarks | grep -q 'no bookmarks' && return
    hg_ bookmarks \
        | sed -r 's/[[:space:]]+(.+?)[[:space:]]+.*/\1/' \
        | while read bookmark; do hg_ bookmark -d $bookmark; done
}

# Convert Hg changesets to Git commits
hg2git() {
    update_bookmarks
    hg_ gexport
}

# Convert Git commits to Hg changesets
git2hg() {
    hg_ gimport
    delete_bookmarks
}

do_map() {
    all=$(grep "$1" $HG_GIT_MAPFILE | cut -d' ' -f$2)
    [ -z "$all" ] && return
    first=$(echo $all | head -n 1)
    [ "$all" = "$first" ] && echo $first
}

map_git_commit() {
    do_map "^$1" 2
}

map_hg_changeset() {
    do_map " $1" 1
}

### COMMANDS ###

hg_configure_help() {
    cat <<EOF
Usage: git hg configure

If ~/.hgrc doesn't exist, writes a suitable default configuration.
EOF
}

hg_configure() {
    [ -f $HOME/.hgrc ] && { echo "$HOME/.hgrc already exists!"; exit 1; }
    cat >$HOME/.hgrc <<EOF
[extensions]
hggit =
progress =
EOF
}

# Clones a mercurial repository, optionally cloning a git mirror for
# less time-consuming setup phase
hg_clone_help() {
    cat <<EOF
Usage: git hg clone REMOTE [[GITMIRROR MAPFILE] TARGET]

Clones the REMOTE hg repository and imports it to a git repository.

If TARGET is given, the git repository is created in that directory.
Otherwise, the target directory is the last path component of REMOTE.

If GITMIRROR and MAPFILE are given, they should be the remote
locations of an existing git mirror of REMOTE and its compressed
git-mapfile (gz or bz2). GITMIRROR is cloned and MAPFILE is downloaded
(using wget) before the hg repostiroy is imported to git. This saves
lots of time for big repositories.
EOF
}

hg_clone() {
    local hgremote gitmirror mapfile target
    check_hg

    [ $# -eq 0 ] && help clone
    hgremote=$1
    target=${1##*/}
    [ $# -eq 2 ] && target=$2
    [ $# -eq 3 ] && { gitmirror=$2; mapfile=$3; }
    [ $# -eq 4 ] && { gitmirror=$2; mapfile=$3; target=$4; }
    [ $# -gt 4 ] && help clone
    [ -n "$gitmirror" -a -z "$mapfile" ] && help clone

    [ -e "$target" ] && { echo "$target already exists" >&2; exit 1; }

    mkdir $target
    cd ${target}

    echo "Cloning the mercurial repository..."
    $HG clone -U "$1" hg

    if [ -n "$gitmirror" ]; then
        echo "Cloning the git mirror..."
        $GIT clone --bare "$2" hg/.hg/git

        echo "Downloading git-mapfile..."
        (
            cd hg/.hg
            wget "$3"
            bunzip2 git-mapfile.bz2 2>/dev/null || gunzip git-mapfile.gz
        )
    fi

    echo "Creating the working git repository..."
    $GIT init
    mv hg .git/hg

    echo "Converting git commits to hg changesets..."
    [ -z "$gitmirror" ] \
        && echo "(This may take a LONG time)" \
        || echo "(This may take some time)"
    hg2git

    echo "Populating the working git repository..."
    $GIT remote add $HG_REMOTE .git/hg/.hg/git
    $GIT fetch $HG_REMOTE
    $GIT branch --set-upstream-to hg/master
    $GIT reset --hard hg/master

    echo "Done"
}

hg_fetch_help() {
    cat <<EOF
Usage: git hg fetch

Pull changes from the remote hg repository, and imports them to git.
EOF
}

hg_fetch() {
    check_hg
    hg_ pull && hg2git && $GIT fetch $HG_REMOTE
}

hg_outgoing_help() {
    cat <<EOF
Usage: git hg outgoing

Export git commits to hg, and show a summary of changes compared to
the remote hg repository.
EOF
}

hg_outgoing() {
    check_hg
    git2hg
    hg_ outgoing
}

hg_push_help() {
    cat <<EOF
Usage: git hg push

Export git commits to hg, and push the changes to the remote hg
repository.
EOF
}

hg_push() {
    check_hg
    git2hg
    hg_ push
}

hg_pushonly_help() {
    cat <<EOF
Usage: git hg pushonly

Push changes to the remote hg repository without exporting git commits
to hg first. Useful after git hg outgoing, because exporting git
commits is quite slow, even if there's nothing to export.
EOF
}

hg_pushonly() {
    check_hg
    hg_ push
}

hg_strip_help() {
    cat <<EOF
Usage: git hg strip COMMIT [COMMIT...]

Strip the given git commits and their descendants from the hg
repository.

This is useful if you have already exported some unwanted changes to
hg, and want to undo them, for example after git hg outgoing but
before git hg push(only).
EOF
}

hg_strip() {
    local commit revset changeset changesets answer
    check_hg

    # Map each commit to changeset and build a revset of all
    # the changesets
    for commit in "$@"; do
        changeset=$(map_git_commit $(git rev-parse "$commit"))
        [ -z "$changeset" ] && {
            echo >&2 "Unable to map commit to changeset: $commit"
            exit 1
        }
        if [ -z "$revset" ]; then
            revset="$changeset"
        else
            revset="$changeset or $revset"
        fi
    done

    # Get all affected changesets by adding the descendants of listed
    # changesets, too.
    changesets=$(hg_ log  -r "descendants($revset) or $revset" --template '{node} ')

    echo "--------------------"
    for changeset in $changesets; do
        git log --oneline -n 1 $(map_hg_changeset $changeset)
    done
    echo "--------------------"
    read -p "Really remove these commits from hg? [yN] " answer
    [ "$answer" != "y" -a "$answer" != "Y" ] && return

    # Strip from hg
    echo "Stripping..."
    hg_ strip $changesets >/dev/null

    # Remove from git-mapfile
    for changeset in $changesets; do
        echo "/ $changeset\$/ d"
    done | sed -i -f - $HG_GIT_MAPFILE
}

hg_map_commit_help() {
    cat <<EOF
Usage: git hg map-commit COMMIT

Given a git commit ID, output the corresponhg hg changeset ID.
EOF
}

hg_map_commit() {
    map_git_commit $(git rev-parse "$1")
}

hg_map_changeset_help() {
    cat <<EOF
Usage: git hg map-changeset CHANGESET

Given a hg changeset ID, output the corresponhg git commit ID.
EOF
}

hg_map_changeset() {
    map_hg_changeset "$1"
}

hg_convert_diff_help() {
    cat <<EOF
Usage: git hg convert-diff

Reads a git-style diff from stdin and converts it to a hg-style diff.
Removes the git extended header lines, and converts the git commit IDs
to mercurial changeset IDs.
EOF
}

hg_convert_diff() {
    local rev commit changeset
    [ -n "$1" ] && rev=$2 || rev=HEAD
    commit=$(git rev-parse "$rev")
    changeset=$(map_git_commit $commit | cut -b -12)
    sed -r \
        -e "s:^diff --git a/(.+?) b/.+\$:diff -r $changeset \\1:" \
        -e '/^index [0-9a-f]+\.\.[0-9a-f]+ [0-9]+$/d'
}

hg_hg_help() {
    cat <<EOF
Usage: git hg hg [ARGS...]

Run a raw hg command.
EOF
}

hg_hg() {
    check_hg
    hg_ "$@"
}

usage() {
    echo "Usage: git hg COMMAND [ARGS...]" >&2
    echo "" >&2
    echo "Use \"git hg help\" to get more help" >&2
    echo "" >&2
    exit 2
}

help_help() {
    cat <<EOF
Usage: git hg help COMMAND

Print help for COMMAND.
EOF
}

help() {
    local fn

    [ -z "$1" ] && {
        cat >&2 <<EOF
Usage: git hg COMMAND [ARGS...]

Available commands:
  clone
  configure
  convert-diff
  fetch
  hg
  map-changeset
  map-commit
  outgoing
  push
  pushonly
  strip

Invoke "git hg help COMMAND" for command help.

EOF
        exit 2
    }

    fn=$(command_fn "$1")
    [ -z "$fn" ] && {
        echo >&2 "No such command: $1"
        exit 2
    }

    ${fn}_help
    echo
}

command_fn() {
    case "$1" in
        help|-h|--help)  echo help ;;
        configure)       echo hg_configure ;;
        clone)           echo hg_clone ;;
        fetch)           echo hg_fetch ;;
        outgoing)        echo hg_outgoing ;;
        push)            echo hg_push ;;
        pushonly)        echo hg_pushonly ;;
        strip)           echo hg_strip ;;
        map-commit)      echo hg_map_commit ;;
        map-changeset)   echo hg_map_changeset ;;
        convert-diff)    echo hg_convert_diff ;;
        hg)              echo hg_hg ;;
    esac
}

fn=$(command_fn "$1")
[ -z "$fn" ] && usage
shift

$fn "$@"
