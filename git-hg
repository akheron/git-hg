#!/bin/sh

set -e

: ${GIT:=git}
: ${HG:=hg}
: ${GIT_DIR:=.git}
: ${HG_DIR:=${GIT_DIR}/hg}
: ${HG_GIT_DIR:=${HG_DIR}/.hg/git}
: ${HG_REMOTE:=hg}

check_hg() {
    command -v $HG >/dev/null || { echo "error: hg not found" >&2; exit 1; }
    python -c 'import hggit' 2>/dev/null || {
        echo "error: hg-git not installed"
        exit 1
    }
    [ -f $HOME/.hgrc ] && grep -q 'hggit' $HOME/.hgrc || {
        echo "error: hg-git not enabled in $HOME/.hgrc, use git hg configure"
        exit 1
    }
}

hg_() {
    $HG -R "$HG_DIR" "$@"
}

# Map default in Hg to master in Git
map_branch() {
    [ "$1" = "default" ] && echo "master" || echo "$1"
}

# Create Hg bookmarks for Hg branches
update_bookmarks() {
    hg_ branches | while read branch rev rest; do
        target=$(map_branch $branch)
        rev=$(echo $rev | sed -r "s/([0-9]+):.*/\\1/")
        hg_ bookmark -f -r $rev $target
    done
}

# Delete all Hg bookmarks
delete_bookmarks() {
    hg_ bookmarks | grep -q 'no bookmarks' && return
    hg_ bookmarks \
        | sed -r 's/[[:space:]]+(.+?)[[:space:]]+.*/\1/' \
        | while read bookmark; do hg_ bookmark -d $bookmark; done
}

# Convert Hg changesets to Git commits
hg2git() {
    update_bookmarks
    hg_ gexport
}

# Convert Git commits to Hg changesets
git2hg() {
    hg_ gimport
    delete_bookmarks
}

### COMMANDS ###

# Writes the required configuration to ~/.hgrc
hg_configure() {
    [ -f $HOME/.hgrc ] && { echo "$HOME/.hgrc already exists!"; exit 1; }
    cat >$HOME/.hgrc <<EOF
[extensions]
hggit =
progress =
EOF
}

# Clones a mercurial repository, optionally cloning a git mirror for
# less time-consuming setup phase
hg_clone() {
    local hgremote gitmirror mapfile target
    check_hg

    [ $# -eq 0 ] && help clone
    hgremote=$1
    target=${1##*/}
    [ $# -eq 2 ] && target=$2
    [ $# -eq 3 ] && { gitmirror=$2; mapfile=$3; }
    [ $# -eq 4 ] && { gitmirror=$2; mapfile=$3; target=$4; }
    [ $# -gt 4 ] && help clone
    [ -n "$gitmirror" -a -z "$mapfile" ] && help clone

    [ -e "$target" ] && { echo "$target already exists" >&2; exit 1; }

    mkdir $target
    cd ${target}

    echo "Cloning the mercurial repository..."
    $HG clone -U "$1" hg

    if [ -n "$gitmirror" ]; then
        echo "Cloning the git mirror..."
        $GIT clone --bare "$2" hg/.hg/git

        echo "Downloading git-mapfile..."
        (
            cd hg/.hg
            wget "$3"
            bunzip2 git-mapfile.bz2 2>/dev/null || gunzip git-mapfile.gz
        )
    fi

    echo "Creating the working git repository..."
    $GIT init
    mv hg .git/hg

    echo "Converting git commits to hg changesets..."
    [ -z "$gitmirror" ] \
        && echo "(This may take a LONG time)" \
        || echo "(This may take some time)"
    hg2git

    echo "Populating the working git repository..."
    $GIT remote add $HG_REMOTE .git/hg/.hg/git
    $GIT fetch $HG_REMOTE
    $GIT branch --set-upstream master hg/master
    $GIT reset --hard hg/master

    echo "Done"
}

# Fetch changes from remote hg repository
hg_fetch() {
    check_hg
    hg_ pull && hg2git && $GIT fetch $HG_REMOTE
}

# Export git changes and show outgoing changes
hg_outgoing() {
    check_hg
    git2hg
    hg_ outgoing
}

# Export git changes and push to remote hg repository
hg_push() {
    check_hg
    git2hg
    hg_ push
}

# Push to remote hg repository without exporting first (useful after
# outgoing, for example)
hg_pushonly() {
    check_hg
    hg_ push
}

usage() {
    echo "Usage: hg git COMMAND [ARGS...]" >&2
    echo "" >&2
    echo "Use \"hg git help\" to get more help" >&2
    echo "" >&2
    exit 2
}

help() {
    echo "Usage: hg git COMMAND [ARGS...]"
    echo ""
    echo "(TODO)"
    exit
}

cmd=$1
[ -z "$cmd" ] && usage
shift

case "$cmd" in
    help|-h|--help)  help "$@" ;;
    configure)       hg_configure "$@" ;;
    clone)           hg_clone "$@" ;;
    fetch)           hg_fetch "$@" ;;
    outgoing)        hg_outgoing "$@" ;;
    push)            hg_push "$@" ;;
    pushonly)        hg_pushonly "$@" ;;
    *)               usage ;;
esac
